{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)ec348cde-a247-473b-9fc8-727e8c866db5","ParentGuid":"(Guid)84c344e9-8333-4d2c-ad03-450a61369a8c","Name":"(string)GetStateExample","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)9a863944-ac86-4ead-b1ba-f3297c1a024c"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)IF GetState.CONFIRM = TRUE THEN\n\t// GetState successful. Output STATE contains result.\n\tState := GetState.STATE;\n\txEnable := FALSE;\nELSIF GetState.ERROR <> CIA405.CANOPEN_KERNEL_ERROR.CANOPEN_KERNEL_NO_ERROR THEN\n\t// an error occured while processing GetState e.g. wrong NodeID or NetworkID\n\txEnable := FALSE;\nEND_IF\n\n// GetState needs the CAN network and the device NodeID (input DEVICE). \nGetState( \tENABLE := xEnable,\n\t\t  \tNETWORK := CANbus.NetId + 1, //CODESYS NetId starts by 0 (the number entered into the CANbus configurator); CiA405 NETWORK by 1; That is the reason why we have to increment it here.\n\t\t  \tTIMEOUT := 0, // no timeout for GetState needed because it is processed locally.\n\t\t\tDEVICE := XN_312_GW_CAN.NodeID // Note: If you want to get the state of the CANopenManager, you can use the CANopenManager NodeID or NodeID 0.\n\t\t\t\t\t\t\t\t\t\t\t\t // A CANopenManager goes to OPERATIONAL if all mandatory (= not optional) slaves are operational.\n);\n","LineInfoPersistence":"(string)ec348cde-a247-473b-9fc8-727e8c866db5_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)// The following program gets the current CANopen state of the CANopenRemoteDevice attached below the CANopen_Manager.\n// Set xEnable to TRUE in online mode to get the program working.\nPROGRAM GetStateExample\nVAR\n\txEnable : BOOL; // Set this variable to true to start the example code. Variable will be set to FALSE if GetState finished execution.\n\tState : CiA405.DEVICE_STATE; // Result: CANopen State\n\t\n\tGetState : CIA405.GET_STATE;\nEND_VAR\n","LineInfoPersistence":"(string)ec348cde-a247-473b-9fc8-727e8c866db5_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)75","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}