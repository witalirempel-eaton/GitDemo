{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)f180d9aa-b132-4802-8c1a-807d461f2129","ParentGuid":"(Guid)710058d6-7eba-4f28-92f8-1a7e88c2c907","Name":"(string)EventCallback","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)f8a58466-d7f6-439f-bbb8-d4600e41d099","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"f8a58466","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)CASE eEvent OF\n\t_3SCOS.CANopenEvent.AFTER_SDO_CONFIG:\n\t\tIF usiNodeID = XN_312_GW_CAN.NodeID THEN\n\t\t\t//Read Device Type of slave\n\t\t\tread(ENABLE := TRUE, NETWORK := CANbus.NetId + 1, DEVICE := usiNodeID, CHANNEL := 0, INDEX := 16#1000, SUBINDEX := 16#0);\n\t\t\tIF read.CONFIRM OR read.ERROR <> CIA405.CANOPEN_KERNEL_ERROR.CANOPEN_KERNEL_NO_ERROR THEN\n\t\t\t\tIF read.CONFIRM THEN\n\t\t\t\t\t//value was read without error\n\t\t\t\t\t// ==> Copy data from SDO read function block\n\t\t\t\t\tMEMUtils.MemCpy(pbyDest := ADR(dwDeviceTypeRead), pbySrc := ADR(read.DATA[1]), dwSize := SIZEOF(dwDeviceTypeRead));\n\t\t\t\t\t//==> On big endian systems: dwValue has to be swapped to CANopen byte order (= Little Endian).\n\t\t\t\t\tMEMUtils.SwapLocalToIntel(pAddress := ADR(dwDeviceTypeRead), iSize := TO_INT(SIZEOF(dwDeviceTypeRead))); //function only swaps on big endian systems\n\t\t\t\t\txDeviceTypeValid := TRUE;\n\t\t\t\tELSE\n\t\t\t\t\txDeviceTypeValid := FALSE;\n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\t\tread(ENABLE := FALSE);\n\t\t\t\tEventCallback := TRUE; //Event handled ==> resume state machine of CANopenRemoteDevice\n\t\t\tEND_IF\n\t\tELSE\n\t\t\tEventCallback := TRUE; // no specific handling for other nodes\n\t\tEND_IF\n\tELSE\n\t\tEventCallback := TRUE; // no specific handling for other events\nEND_CASE","LineInfoPersistence":"(string)f180d9aa-b132-4802-8c1a-807d461f2129_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)// This method implements a CANopen Manager event handler.\n// Every time the SDO configuration phase for CANopenRemoteDevice has finished, the Device Type will be read by this handler.\n// As long as Event Handler returns FALSE the state machine of CANopenRemoteDevice is stopped. \nMETHOD EventCallback : BOOL\nVAR_INPUT\n\t(*Event Type*)\n\teEvent\t: _3SCOS.CANopenEvent;\n\t(*NodeID associated with the event; 0 if not relevant.*)\n\tusiNodeID\t: USINT;\nEND_VAR\n","LineInfoPersistence":"(string)f180d9aa-b132-4802-8c1a-807d461f2129_Decl_LineIds"}}}}}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","f8a58466":"{f8a58466-d7f6-439f-bbb8-d4600e41d099}","string":"System.String"}}},"FormatVersion":"1.0"}