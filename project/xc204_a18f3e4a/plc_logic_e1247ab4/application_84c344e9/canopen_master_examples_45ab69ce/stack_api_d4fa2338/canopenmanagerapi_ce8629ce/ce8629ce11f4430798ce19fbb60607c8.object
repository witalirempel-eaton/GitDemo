{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)ce8629ce-11f4-4307-98ce-19fbb60607c8","ParentGuid":"(Guid)84c344e9-8333-4d2c-ad03-450a61369a8c","Name":"(string)CANopenManagerAPI","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)d4fa2338-5e01-458e-95d1-f7626d464e9a"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//gets the CANopenManager kernel state ==> see also CiA405.GET_CANOPEN_KERNEL_STATE\nkernelState := CANopen_Manager.KernelState;\n\n//Are all mandatory slaves found and configured by CANopenManager?\nxAllMandatorySlaveBooted := CANopen_Manager.MandatorySlavesBooted;\n\n//Are all optional slaves found and configured by CANopenManager?\nxAllOptionalSlavesBooted := CANopen_Manager.OptionalSlavesBooted;\n\n//Gets or sets the NMT Inhibit Time (unit: multiple of 100us).\nwNMTInhibitTime := CANopen_Manager.NMTInhibitTime;\n\n//go through all remote devices of CANopen_Manager and collect some statistics\nudiNumberOfSlaves := 0;\nudiNumberOfOperationalSlaves := 0;\nudiTotalConfigurationErrors := 0;\nudiNumberOfSlavesWithActivatedErrorControl := 0;\n\nFOR usiCurrentNodeID := 1 TO 127 DO\n\tpDevice := CANopen_Manager.GetSlaveByNodeID(usiCurrentNodeID);\n\tIF pDevice <> 0 THEN\n\t\t//count slaves\n\t\tudiNumberOfSlaves := udiNumberOfSlaves + 1;\n\t\t\n\t\t//Get the slave state ==> see also CiA405.GET_STATE\n\t\tIF pDevice^.CANopenState = _3SCOS.DEVICE_STATE.OPERATIONAL THEN\n\t\t\tudiNumberOfOperationalSlaves := udiNumberOfOperationalSlaves + 1;\n\t\tEND_IF\n\t\t\n\t\t//Sum up configuration errors. \n\t\t//NOTE: For getting more detailed information you can add the Compiler Define CANOPEN_DEBUG to the application.\n\t\t//Then perform a new download and go to the PLC logger. It contains further information for debugging purpose. \n\t\tudiTotalConfigurationErrors := udiTotalConfigurationErrors + pDevice^.ConfigurationErrors;\n\t\t\n\t\t//Sum up all slaves with error control activated\n\t\tIF pDevice^.ErrorControlActivated THEN\n\t\t\tudiNumberOfSlavesWithActivatedErrorControl := udiNumberOfSlavesWithActivatedErrorControl + 1;\n\t\tEND_IF\n\tEND_IF\nEND_FOR\n\n// Register a CANopen Manager event handler: An event handler can be used to add additional code to the stack state machine.\n// In this example a SDO Read for CANopenRemoteDevice is performed after SDO configuration phase.\n// For further details see CANopenManagerEventHandler.EventCallback\nIF NOT xEventHandlerRegistered THEN\n\txEventHandlerRegistered := CANopen_Manager.RegisterEventHandler(EventHandler);\nEND_IF","LineInfoPersistence":"(string)ce8629ce-11f4-4307-98ce-19fbb60607c8_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)// This example program shows how to use the CANopen Manager API.\nPROGRAM CANopenManagerAPI\nVAR\n\tpDevice : POINTER TO _3SCOS.CANRemoteDevice;\n\tkernelState : _3SCOS.CANOPEN_KERNEL_STATE;\n\txAllMandatorySlaveBooted : BOOL;\n\txAllOptionalSlavesBooted : BOOL;\n\twNMTInhibitTime : WORD;\n\t\n\tudiNumberOfSlaves : UDINT; //How many slaves are attached below the CANopenManager\n\tudiNumberOfOperationalSlaves : UDINT; //How many slaves are in OPERATIONAL\n\tudiTotalConfigurationErrors : UDINT; //How many configuration errors (= SDO aborts) happened in configuration phase?\n\tudiNumberOfSlavesWithActivatedErrorControl : UDINT; //How many slaves have Error control (= Heartbeat or Nodeguarding) activated?\n\t\n\tusiCurrentNodeID : USINT;\n\t\n\txEventHandlerRegistered : BOOL;\n\tEventHandler : CANopenManagerEventHandler; // CANopenManager event handler instance\nEND_VAR\n","LineInfoPersistence":"(string)ce8629ce-11f4-4307-98ce-19fbb60607c8_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)109","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}